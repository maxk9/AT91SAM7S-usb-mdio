<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\USb_MDIO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\USb_MDIO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Mon Dec 12 15:01:03 2016
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; microrl_insert_char &rArr; microrl_get_complite &rArr; terminal_print_line &rArr; terminal_reset_cursor &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4]">Reset_Handler</a>
 <LI><a href="#[5b]">__user_initial_stackheap</a>
 <LI><a href="#[5]">Undef_Handler</a>
 <LI><a href="#[6]">SWI_Handler</a>
 <LI><a href="#[7]">PAbt_Handler</a>
 <LI><a href="#[8]">DAbt_Handler</a>
 <LI><a href="#[9]">IRQ_Handler</a>
 <LI><a href="#[a]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">Undef_Handler</a><BR>
 <LI><a href="#[6]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SWI_Handler</a><BR>
 <LI><a href="#[7]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">PAbt_Handler</a><BR>
 <LI><a href="#[8]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DAbt_Handler</a><BR>
 <LI><a href="#[9]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">IRQ_Handler</a><BR>
 <LI><a href="#[a]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">CDCDSerialDriver_SetLineCodingCallback</a> from cdcdserialdriver.o(i.CDCDSerialDriver_SetLineCodingCallback) referenced from cdcdserialdriver.o(i.CDCDSerialDriver_SetLineCoding)
 <LI><a href="#[8]">DAbt_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[a]">FIQ_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[9]">IRQ_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[17]">ISR_Timer0</a> from main.o(i.ISR_Timer0) referenced from main.o(i.config_board)
 <LI><a href="#[18]">ISR_Timer1</a> from main.o(i.ISR_Timer1) referenced from main.o(i.config_board)
 <LI><a href="#[7]">PAbt_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[6]">SWI_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[1d]">TXCDCcompleted</a> from main.o(i.TXCDCcompleted) referenced from main.o(i.main)
 <LI><a href="#[15]">USBD_InterruptHandler</a> from usbd_udp.o(i.USBD_InterruptHandler) referenced from usbdcallbacks_initialized.o(i.USBDCallbacks_Initialized)
 <LI><a href="#[16]">USBD_SetAddress</a> from usbd_udp.o(i.USBD_SetAddress) referenced from usbddriver.o(i.USBDDriver_RequestHandler)
 <LI><a href="#[5]">Undef_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[1e]">UsbCDCDataReceived</a> from main.o(i.UsbCDCDataReceived) referenced from main.o(i.main)
 <LI><a href="#[1f]">__main</a> from __main.o(!!!main) referenced from sam7.o(RESET)
 <LI><a href="#[e]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[d]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[c]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[1b]">complet</a> from consol.o(i.complet) referenced from consol.o(i.init_u_consol)
 <LI><a href="#[12]">defaultFiqHandler</a> from board_lowlevel.o(i.defaultFiqHandler) referenced from board_lowlevel.o(i.LowLevelInit)
 <LI><a href="#[13]">defaultIrqHandler</a> from board_lowlevel.o(i.defaultIrqHandler) referenced from board_lowlevel.o(i.LowLevelInit)
 <LI><a href="#[14]">defaultSpuriousHandler</a> from board_lowlevel.o(i.defaultSpuriousHandler) referenced from board_lowlevel.o(i.LowLevelInit)
 <LI><a href="#[1a]">execute</a> from consol.o(i.execute) referenced from consol.o(i.init_u_consol)
 <LI><a href="#[10]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[19]">print</a> from consol.o(i.print) referenced from consol.o(i.init_u_consol)
 <LI><a href="#[1c]">sigint</a> from consol.o(i.sigint) referenced from consol.o(i.init_u_consol)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[20]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[22]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[108]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[23]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[109]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[24]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[45]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[26]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[28]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[10a]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[30]"></a>__rt_lib_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[10b]"></a>__rt_lib_init_fp_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_heap_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2a]"></a>__rt_lib_init_lc_common</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[10d]"></a>__rt_lib_init_preinit_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_rand_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_user_alloc_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[110]"></a>__rt_lib_init_lc_collate_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2c]"></a>__rt_lib_init_lc_ctype_2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[111]"></a>__rt_lib_init_alloca_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[112]"></a>__rt_lib_init_argv_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[113]"></a>__rt_lib_init_atexit_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[114]"></a>__rt_lib_init_clock_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[115]"></a>__rt_lib_init_cpp_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[116]"></a>__rt_lib_init_exceptions_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[117]"></a>__rt_lib_init_fp_trap_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[118]"></a>__rt_lib_init_getenv_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[119]"></a>__rt_lib_init_lc_ctype_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_lc_time_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_return</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_signal_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_stdio_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[35]"></a>__rt_lib_shutdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[120]"></a>__rt_lib_shutdown_cpp_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[121]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[122]"></a>__rt_lib_shutdown_heap_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[123]"></a>__rt_lib_shutdown_return</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[124]"></a>__rt_lib_shutdown_signal_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[125]"></a>__rt_lib_shutdown_stdio_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[126]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[21]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[127]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2d]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2f]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[128]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[31]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; microrl_insert_char &rArr; microrl_get_complite &rArr; terminal_print_line &rArr; terminal_reset_cursor &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[129]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5d]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[34]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[12a]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[36]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5b]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sam7.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[12b]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__2printf</STRONG> (ARM, 32 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_Initialize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBus_Configure
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDescriptor
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Stall
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfiguration
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_InterruptHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigureEndpoint
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_RequestHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_SetLineCoding
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_SetControlLineState
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_GetLineCoding
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriverCallbacks_InterfaceSettingChanged
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriverCallbacks_ConfigurationChanged
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[3a]"></a>__2sprintf</STRONG> (ARM, 64 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>__2snprintf</STRONG> (ARM, 88 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_reset_cursor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_move_cursor
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>_printf_pre_padding</STRONG> (ARM, 84 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[3f]"></a>_printf_post_padding</STRONG> (ARM, 72 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[3d]"></a>_printf_str</STRONG> (ARM, 144 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[25]"></a>_printf_int_dec</STRONG> (ARM, 164 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[27]"></a>_printf_int_hex</STRONG> (ARM, 136 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[12d]"></a>_printf_longlong_hex</STRONG> (ARM, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__printf</STRONG> (ARM, 496 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[46]"></a>atoi</STRONG> (ARM, 44 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute
</UL>

<P><STRONG><a name="[48]"></a>strtol</STRONG> (ARM, 184 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[c9]"></a>strstr</STRONG> (ARM, 68 bytes, Stack size 8 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complet
</UL>

<P><STRONG><a name="[c8]"></a>strlen</STRONG> (ARM, 96 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_get_complite
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_len
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_save_line
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_restore_line
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[4b]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[12e]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__aeabi_memmove</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memmove.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_insert_text
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_backspace
</UL>

<P><STRONG><a name="[4d]"></a>__rt_memmove</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memmove.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[12f]"></a>__memmove_lastfew</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FindMckDivisor
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindClockConfiguration
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_Initialize
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_restore_line
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_init
</UL>

<P><STRONG><a name="[52]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[51]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_line_handler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[ca]"></a>strcmp</STRONG> (ARM, 240 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complet
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_uwrite4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCLineCoding_Initialize
</UL>

<P><STRONG><a name="[135]"></a>__rt_uwrite4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_WaitTimeInUs
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_WaitTimeInMs
</UL>

<P><STRONG><a name="[137]"></a>__use_two_region_memory</STRONG> (ARM, 4 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__rt_heap_escrow$2region</STRONG> (ARM, 4 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__rt_heap_expand$2region</STRONG> (ARM, 4 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__rt_ctype_table</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_errno_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[13a]"></a>__errno$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__rt_errno_addr$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_printf_int_common</STRONG> (ARM, 296 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3b]"></a>_printf_char_common</STRONG> (ARM, 60 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[c]"></a>_sputc</STRONG> (ARM, 16 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>_snputc</STRONG> (ARM, 24 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>_printf_cs_common</STRONG> (ARM, 36 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[56]"></a>_printf_char</STRONG> (ARM, 28 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[29]"></a>_printf_string</STRONG> (ARM, 12 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[39]"></a>_printf_char_file</STRONG> (ARM, 48 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[4a]"></a>_strtoul</STRONG> (ARM, 236 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_memmove4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>__aeabi_memmove8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__rt_memmove_w</STRONG> (ARM, 128 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[4f]"></a>__memmove_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[13e]"></a>__memmove_lastfew_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[13f]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[140]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__rt_locale</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[58]"></a>_chval</STRONG> (ARM, 32 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[2e]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[33]"></a>exit</STRONG> (ARM, 24 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_WaitTimeInUs
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_WaitTimeInMs
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FindMckDivisor
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_Configure
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindClockConfiguration
</UL>

<P><STRONG><a name="[d6]"></a>AIC_ConfigureIT</STRONG> (ARM, 52 bytes, Stack size 0 bytes, aic.o(i.AIC_ConfigureIT))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[d7]"></a>AIC_EnableIT</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aic.o(i.AIC_EnableIT))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[65]"></a>CDCDSerialDriver_Initialize</STRONG> (ARM, 80 bytes, Stack size 8 bytes, cdcdserialdriver.o(i.CDCDSerialDriver_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = CDCDSerialDriver_Initialize &rArr; USBD_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCLineCoding_Initialize
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[69]"></a>CDCDSerialDriver_Read</STRONG> (ARM, 48 bytes, Stack size 24 bytes, cdcdserialdriver.o(i.CDCDSerialDriver_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CDCDSerialDriver_Read &rArr; USBD_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>CDCDSerialDriver_RequestHandler</STRONG> (ARM, 188 bytes, Stack size 16 bytes, cdcdserialdriver.o(i.CDCDSerialDriver_RequestHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = CDCDSerialDriver_RequestHandler &rArr; USBDDriver_RequestHandler &rArr; GetDescriptor &rArr; USBD_Stall &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetRequest
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_SetLineCoding
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_SetControlLineState
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_GetLineCoding
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCSetControlLineStateRequest_IsDtePresent
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCSetControlLineStateRequest_ActivateCarrier
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCallbacks_RequestReceived
</UL>

<P><STRONG><a name="[72]"></a>CDCDSerialDriver_Write</STRONG> (ARM, 48 bytes, Stack size 24 bytes, cdcdserialdriver.o(i.CDCDSerialDriver_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CDCDSerialDriver_Write &rArr; USBD_Write &rArr; USBD_setCSR
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>CDCLineCoding_Initialize</STRONG> (ARM, 52 bytes, Stack size 24 bytes, cdclinecoding.o(i.CDCLineCoding_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CDCLineCoding_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_Initialize
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_SetLineCodingCallback
</UL>

<P><STRONG><a name="[6f]"></a>CDCSetControlLineStateRequest_ActivateCarrier</STRONG> (ARM, 44 bytes, Stack size 8 bytes, cdcsetcontrollinestaterequest.o(i.CDCSetControlLineStateRequest_ActivateCarrier))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDCSetControlLineStateRequest_ActivateCarrier
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_RequestHandler
</UL>

<P><STRONG><a name="[6e]"></a>CDCSetControlLineStateRequest_IsDtePresent</STRONG> (ARM, 44 bytes, Stack size 8 bytes, cdcsetcontrollinestaterequest.o(i.CDCSetControlLineStateRequest_IsDtePresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDCSetControlLineStateRequest_IsDtePresent
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_RequestHandler
</UL>

<P><STRONG><a name="[75]"></a>DBGU_Configure</STRONG> (ARM, 84 bytes, Stack size 16 bytes, dbgu.o(i.DBGU_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = DBGU_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[ea]"></a>DBGU_PutChar</STRONG> (ARM, 60 bytes, Stack size 0 bytes, dbgu.o(i.DBGU_PutChar))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[76]"></a>DRV_MDIOM_Init</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mdio_drv.o(i.DRV_MDIOM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DRV_MDIOM_Init &rArr; PIO_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[85]"></a>LCD_put_string</STRONG> (ARM, 88 bytes, Stack size 32 bytes, lcd_siem_s65.o(i.LCD_put_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = LCD_put_string &rArr; put_char &rArr; lcd_dat8 &rArr; lcd_cspulse &rArr; UTIL_WaitTimeInUs &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>LED_Clear</STRONG> (ARM, 92 bytes, Stack size 8 bytes, led.o(i.LED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXCDCcompleted
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_InterruptHandler
</UL>

<P><STRONG><a name="[8a]"></a>LED_Configure</STRONG> (ARM, 48 bytes, Stack size 8 bytes, led.o(i.LED_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_Configure &rArr; PIO_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[8b]"></a>LED_Set</STRONG> (ARM, 92 bytes, Stack size 8 bytes, led.o(i.LED_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbCDCDataReceived
</UL>

<P><STRONG><a name="[8c]"></a>LED_Toggle</STRONG> (ARM, 92 bytes, Stack size 8 bytes, led.o(i.LED_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_GetOutputDataStatus
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>LowLevelInit</STRONG> (ARM, 324 bytes, Stack size 0 bytes, board_lowlevel.o(i.LowLevelInit))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[88]"></a>PIO_Clear</STRONG> (ARM, 12 bytes, Stack size 0 bytes, pio.o(i.PIO_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Toggle
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Clear
</UL>

<P><STRONG><a name="[77]"></a>PIO_Configure</STRONG> (ARM, 284 bytes, Stack size 16 bytes, pio.o(i.PIO_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIO_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralB
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralA
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetOutput
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetInput
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configure
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MDIOM_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[84]"></a>PIO_Get</STRONG> (ARM, 80 bytes, Stack size 0 bytes, pio.o(i.PIO_Get))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer0
</UL>

<P><STRONG><a name="[8d]"></a>PIO_GetOutputDataStatus</STRONG> (ARM, 44 bytes, Stack size 0 bytes, pio.o(i.PIO_GetOutputDataStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Toggle
</UL>

<P><STRONG><a name="[89]"></a>PIO_Set</STRONG> (ARM, 12 bytes, Stack size 0 bytes, pio.o(i.PIO_Set))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Toggle
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Clear
</UL>

<P><STRONG><a name="[cd]"></a>PWMC_ConfigureChannel</STRONG> (ARM, 92 bytes, Stack size 8 bytes, pwmc.o(i.PWMC_ConfigureChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMC_ConfigureChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[92]"></a>PWMC_ConfigureClocks</STRONG> (ARM, 88 bytes, Stack size 24 bytes, pwmc.o(i.PWMC_ConfigureClocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = PWMC_ConfigureClocks &rArr; FindClockConfiguration &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindClockConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[d0]"></a>PWMC_EnableChannel</STRONG> (ARM, 20 bytes, Stack size 0 bytes, pwmc.o(i.PWMC_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[cf]"></a>PWMC_SetDutyCycle</STRONG> (ARM, 76 bytes, Stack size 0 bytes, pwmc.o(i.PWMC_SetDutyCycle))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[ce]"></a>PWMC_SetPeriod</STRONG> (ARM, 76 bytes, Stack size 0 bytes, pwmc.o(i.PWMC_SetPeriod))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[d1]"></a>SPID_Configure</STRONG> (ARM, 92 bytes, Stack size 0 bytes, spid.o(i.SPID_Configure))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[d2]"></a>SPID_ConfigureCS</STRONG> (ARM, 16 bytes, Stack size 0 bytes, spid.o(i.SPID_ConfigureCS))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[d5]"></a>TC_Configure</STRONG> (ARM, 28 bytes, Stack size 0 bytes, tc.o(i.TC_Configure))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[9a]"></a>TC_FindMckDivisor</STRONG> (ARM, 188 bytes, Stack size 48 bytes, tc.o(i.TC_FindMckDivisor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = TC_FindMckDivisor &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[d8]"></a>TC_Start</STRONG> (ARM, 12 bytes, Stack size 0 bytes, tc.o(i.TC_Start))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[7d]"></a>USBConfigurationDescriptor_GetTotalLength</STRONG> (ARM, 20 bytes, Stack size 0 bytes, usbconfigurationdescriptor.o(i.USBConfigurationDescriptor_GetTotalLength))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDescriptor
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBConfigurationDescriptor_Parse
</UL>

<P><STRONG><a name="[80]"></a>USBConfigurationDescriptor_IsSelfPowered</STRONG> (ARM, 36 bytes, Stack size 0 bytes, usbconfigurationdescriptor.o(i.USBConfigurationDescriptor_IsSelfPowered))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceStatus
</UL>

<P><STRONG><a name="[95]"></a>USBConfigurationDescriptor_Parse</STRONG> (ARM, 216 bytes, Stack size 32 bytes, usbconfigurationdescriptor.o(i.USBConfigurationDescriptor_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBConfigurationDescriptor_Parse &rArr; USBGenericDescriptor_GetNextDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericDescriptor_GetType
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericDescriptor_GetNextDescriptor
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericDescriptor_GetLength
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBConfigurationDescriptor_GetTotalLength
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConfiguration
</UL>

<P><STRONG><a name="[bc]"></a>USBDCallbacks_Initialized</STRONG> (ARM, 44 bytes, Stack size 0 bytes, usbdcallbacks_initialized.o(i.USBDCallbacks_Initialized))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[a5]"></a>USBDCallbacks_RequestReceived</STRONG> (ARM, 20 bytes, Stack size 8 bytes, cdcdserialdriver.o(i.USBDCallbacks_RequestReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = USBDCallbacks_RequestReceived &rArr; CDCDSerialDriver_RequestHandler &rArr; USBDDriver_RequestHandler &rArr; GetDescriptor &rArr; USBD_Stall &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_RequestHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
</UL>

<P><STRONG><a name="[c1]"></a>USBDCallbacks_Reset</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbdcallbacks_reset.o(i.USBDCallbacks_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_InterruptHandler
</UL>

<P><STRONG><a name="[97]"></a>USBDDriverCallbacks_ConfigurationChanged</STRONG> (ARM, 20 bytes, Stack size 8 bytes, usbddrivercb_cfgchanged.o(i.USBDDriverCallbacks_ConfigurationChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBDDriverCallbacks_ConfigurationChanged &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConfiguration
</UL>

<P><STRONG><a name="[99]"></a>USBDDriverCallbacks_InterfaceSettingChanged</STRONG> (ARM, 24 bytes, Stack size 16 bytes, usbddrivercb_ifsettingchanged.o(i.USBDDriverCallbacks_InterfaceSettingChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = USBDDriverCallbacks_InterfaceSettingChanged &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInterface
</UL>

<P><STRONG><a name="[67]"></a>USBDDriver_Initialize</STRONG> (ARM, 64 bytes, Stack size 16 bytes, usbddriver.o(i.USBDDriver_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = USBDDriver_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_Initialize
</UL>

<P><STRONG><a name="[71]"></a>USBDDriver_RequestHandler</STRONG> (ARM, 1160 bytes, Stack size 48 bytes, usbddriver.o(i.USBDDriver_RequestHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = USBDDriver_RequestHandler &rArr; GetDescriptor &rArr; USBD_Stall &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInterface
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEndpointStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceStatus
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDescriptor
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConfiguration
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Unhalt
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Stall
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Halt
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSetConfigurationRequest_GetConfiguration
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSetAddressRequest_GetAddress
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBInterfaceRequest_GetInterface
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBInterfaceRequest_GetAlternateSetting
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGetDescriptorRequest_GetDescriptorType
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGetDescriptorRequest_GetDescriptorIndex
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetRequest
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetRecipient
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetLength
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetEndpointNumber
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFeatureRequest_GetFeatureSelector
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInterface
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_RequestHandler
</UL>

<P><STRONG><a name="[96]"></a>USBD_ConfigureEndpoint</STRONG> (ARM, 264 bytes, Stack size 24 bytes, usbd_udp.o(i.USBD_ConfigureEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = USBD_ConfigureEndpoint &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_setCSR
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndOfTransfer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDescriptor_GetType
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDescriptor_GetNumber
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDescriptor_GetMaxPacketSize
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDescriptor_GetDirection
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_InterruptHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConfiguration
</UL>

<P><STRONG><a name="[b8]"></a>USBD_Connect</STRONG> (ARM, 52 bytes, Stack size 16 bytes, usbd_udp.o(i.USBD_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_Connect
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBus_Configure
</UL>

<P><STRONG><a name="[f9]"></a>USBD_GetState</STRONG> (ARM, 12 bytes, Stack size 0 bytes, usbd_udp.o(i.USBD_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>USBD_Halt</STRONG> (ARM, 92 bytes, Stack size 16 bytes, usbd_udp.o(i.USBD_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_Halt &rArr; UDP_EndOfTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_setCSR
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndOfTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[68]"></a>USBD_Init</STRONG> (ARM, 100 bytes, Stack size 16 bytes, usbd_udp.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = USBD_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCallbacks_Initialized
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ResetEndpoints
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EnableUsbClock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EnablePeripheralClock
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_Initialize
</UL>

<P><STRONG><a name="[15]"></a>USBD_InterruptHandler</STRONG> (ARM, 468 bytes, Stack size 32 bytes, usbd_udp.o(i.USBD_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = USBD_InterruptHandler &rArr; UDP_EndpointHandler &rArr; USBDCallbacks_RequestReceived &rArr; CDCDSerialDriver_RequestHandler &rArr; USBDDriver_RequestHandler &rArr; GetDescriptor &rArr; USBD_Stall &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Clear
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCallbacks_Reset
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigureEndpoint
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ResetEndpoints
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EnableUsbClock
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EnableTransceiver
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EnablePeripheralClock
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_DisableUsbClock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_DisableTransceiver
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_DisablePeripheralClock
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_DisableEndpoints
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcallbacks_initialized.o(i.USBDCallbacks_Initialized)
</UL>
<P><STRONG><a name="[82]"></a>USBD_IsHalted</STRONG> (ARM, 40 bytes, Stack size 0 bytes, usbd_udp.o(i.USBD_IsHalted))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEndpointStatus
</UL>

<P><STRONG><a name="[7b]"></a>USBD_IsHighSpeed</STRONG> (ARM, 8 bytes, Stack size 0 bytes, usbd_udp.o(i.USBD_IsHighSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceStatus
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDescriptor
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConfiguration
</UL>

<P><STRONG><a name="[6a]"></a>USBD_Read</STRONG> (ARM, 116 bytes, Stack size 20 bytes, usbd_udp.o(i.USBD_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_Read
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_SetLineCoding
</UL>

<P><STRONG><a name="[16]"></a>USBD_SetAddress</STRONG> (ARM, 92 bytes, Stack size 8 bytes, usbd_udp.o(i.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBD_SetAddress &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbddriver.o(i.USBDDriver_RequestHandler)
</UL>
<P><STRONG><a name="[94]"></a>USBD_SetConfiguration</STRONG> (ARM, 96 bytes, Stack size 8 bytes, usbd_udp.o(i.USBD_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USBD_SetConfiguration &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_DisableEndpoints
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConfiguration
</UL>

<P><STRONG><a name="[7e]"></a>USBD_Stall</STRONG> (ARM, 72 bytes, Stack size 16 bytes, usbd_udp.o(i.USBD_Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = USBD_Stall &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_setCSR
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInterface
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEndpointStatus
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDescriptor
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInterface
</UL>

<P><STRONG><a name="[b0]"></a>USBD_Unhalt</STRONG> (ARM, 160 bytes, Stack size 8 bytes, usbd_udp.o(i.USBD_Unhalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Unhalt
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[64]"></a>USBD_Write</STRONG> (ARM, 220 bytes, Stack size 32 bytes, usbd_udp.o(i.USBD_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_Write &rArr; USBD_setCSR
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_setCSR
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_WritePayload
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_Write
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInterface
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEndpointStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceStatus
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDescriptor
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConfiguration
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_SetLineCodingCallback
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_SetControlLineState
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_GetLineCoding
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInterface
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConfiguration
</UL>

<P><STRONG><a name="[a0]"></a>USBD_setCSR</STRONG> (ARM, 148 bytes, Stack size 12 bytes, usbd_udp.o(i.USBD_setCSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_setCSR
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Stall
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Halt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigureEndpoint
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
</UL>

<P><STRONG><a name="[b6]"></a>USBEndpointDescriptor_GetDirection</STRONG> (ARM, 36 bytes, Stack size 0 bytes, usbendpointdescriptor.o(i.USBEndpointDescriptor_GetDirection))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigureEndpoint
</UL>

<P><STRONG><a name="[b7]"></a>USBEndpointDescriptor_GetMaxPacketSize</STRONG> (ARM, 20 bytes, Stack size 0 bytes, usbendpointdescriptor.o(i.USBEndpointDescriptor_GetMaxPacketSize))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigureEndpoint
</UL>

<P><STRONG><a name="[b4]"></a>USBEndpointDescriptor_GetNumber</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usbendpointdescriptor.o(i.USBEndpointDescriptor_GetNumber))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigureEndpoint
</UL>

<P><STRONG><a name="[b5]"></a>USBEndpointDescriptor_GetType</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usbendpointdescriptor.o(i.USBEndpointDescriptor_GetType))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigureEndpoint
</UL>

<P><STRONG><a name="[af]"></a>USBFeatureRequest_GetFeatureSelector</STRONG> (ARM, 24 bytes, Stack size 8 bytes, usbfeaturerequest.o(i.USBFeatureRequest_GetFeatureSelector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBFeatureRequest_GetFeatureSelector
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[7c]"></a>USBGenericDescriptor_GetLength</STRONG> (ARM, 12 bytes, Stack size 0 bytes, usbgenericdescriptor.o(i.USBGenericDescriptor_GetLength))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDescriptor
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericDescriptor_GetNextDescriptor
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBConfigurationDescriptor_Parse
</UL>

<P><STRONG><a name="[a6]"></a>USBGenericDescriptor_GetNextDescriptor</STRONG> (ARM, 24 bytes, Stack size 4 bytes, usbgenericdescriptor.o(i.USBGenericDescriptor_GetNextDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBGenericDescriptor_GetNextDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericDescriptor_GetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBConfigurationDescriptor_Parse
</UL>

<P><STRONG><a name="[a7]"></a>USBGenericDescriptor_GetType</STRONG> (ARM, 12 bytes, Stack size 0 bytes, usbgenericdescriptor.o(i.USBGenericDescriptor_GetType))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBConfigurationDescriptor_Parse
</UL>

<P><STRONG><a name="[a4]"></a>USBGenericRequest_GetDirection</STRONG> (ARM, 36 bytes, Stack size 0 bytes, usbgenericrequest.o(i.USBGenericRequest_GetDirection))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
</UL>

<P><STRONG><a name="[ae]"></a>USBGenericRequest_GetEndpointNumber</STRONG> (ARM, 24 bytes, Stack size 4 bytes, usbgenericrequest.o(i.USBGenericRequest_GetEndpointNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBGenericRequest_GetEndpointNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[c2]"></a>USBGenericRequest_GetIndex</STRONG> (ARM, 12 bytes, Stack size 0 bytes, usbgenericrequest.o(i.USBGenericRequest_GetIndex))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBInterfaceRequest_GetInterface
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetEndpointNumber
</UL>

<P><STRONG><a name="[aa]"></a>USBGenericRequest_GetLength</STRONG> (ARM, 12 bytes, Stack size 0 bytes, usbgenericrequest.o(i.USBGenericRequest_GetLength))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[ad]"></a>USBGenericRequest_GetRecipient</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usbgenericrequest.o(i.USBGenericRequest_GetRecipient))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[6c]"></a>USBGenericRequest_GetRequest</STRONG> (ARM, 12 bytes, Stack size 0 bytes, usbgenericrequest.o(i.USBGenericRequest_GetRequest))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_RequestHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[74]"></a>USBGenericRequest_GetValue</STRONG> (ARM, 12 bytes, Stack size 0 bytes, usbgenericrequest.o(i.USBGenericRequest_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSetConfigurationRequest_GetConfiguration
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSetAddressRequest_GetAddress
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBInterfaceRequest_GetAlternateSetting
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGetDescriptorRequest_GetDescriptorType
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGetDescriptorRequest_GetDescriptorIndex
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFeatureRequest_GetFeatureSelector
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCSetControlLineStateRequest_IsDtePresent
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCSetControlLineStateRequest_ActivateCarrier
</UL>

<P><STRONG><a name="[a9]"></a>USBGetDescriptorRequest_GetDescriptorIndex</STRONG> (ARM, 24 bytes, Stack size 8 bytes, usbgetdescriptorrequest.o(i.USBGetDescriptorRequest_GetDescriptorIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBGetDescriptorRequest_GetDescriptorIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[a8]"></a>USBGetDescriptorRequest_GetDescriptorType</STRONG> (ARM, 24 bytes, Stack size 8 bytes, usbgetdescriptorrequest.o(i.USBGetDescriptorRequest_GetDescriptorType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBGetDescriptorRequest_GetDescriptorType
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[b3]"></a>USBInterfaceRequest_GetAlternateSetting</STRONG> (ARM, 24 bytes, Stack size 8 bytes, usbinterfacerequest.o(i.USBInterfaceRequest_GetAlternateSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBInterfaceRequest_GetAlternateSetting
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[b2]"></a>USBInterfaceRequest_GetInterface</STRONG> (ARM, 24 bytes, Stack size 8 bytes, usbinterfacerequest.o(i.USBInterfaceRequest_GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBInterfaceRequest_GetInterface
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[ab]"></a>USBSetAddressRequest_GetAddress</STRONG> (ARM, 24 bytes, Stack size 8 bytes, usbsetaddressrequest.o(i.USBSetAddressRequest_GetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBSetAddressRequest_GetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[ac]"></a>USBSetConfigurationRequest_GetConfiguration</STRONG> (ARM, 24 bytes, Stack size 8 bytes, usbsetconfigurationrequest.o(i.USBSetConfigurationRequest_GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBSetConfigurationRequest_GetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[c3]"></a>UTIL_WaitTimeInMs</STRONG> (ARM, 108 bytes, Stack size 16 bytes, lcd_siem_s65.o(i.UTIL_WaitTimeInMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = UTIL_WaitTimeInMs &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_screen
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_area
</UL>

<P><STRONG><a name="[c5]"></a>UTIL_WaitTimeInUs</STRONG> (ARM, 108 bytes, Stack size 16 bytes, lcd_siem_s65.o(i.UTIL_WaitTimeInUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = UTIL_WaitTimeInUs &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cspulse
</UL>

<P><STRONG><a name="[37]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1b]"></a>complet</STRONG> (ARM, 396 bytes, Stack size 24 bytes, consol.o(i.complet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = complet &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> consol.o(i.init_u_consol)
</UL>
<P><STRONG><a name="[cb]"></a>config_board</STRONG> (ARM, 564 bytes, Stack size 32 bytes, main.o(i.config_board))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = config_board &rArr; CDCDSerialDriver_Initialize &rArr; USBD_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_screen
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Start
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FindMckDivisor
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Configure
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPID_ConfigureCS
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPID_Configure
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SetPeriod
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SetDutyCycle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_EnableChannel
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_ConfigureClocks
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_ConfigureChannel
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowLevelInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configure
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MDIOM_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_Configure
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_Initialize
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIC_EnableIT
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIC_ConfigureIT
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBus_Configure
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>defaultFiqHandler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, board_lowlevel.o(i.defaultFiqHandler))
<BR>[Address Reference Count : 1]<UL><LI> board_lowlevel.o(i.LowLevelInit)
</UL>
<P><STRONG><a name="[13]"></a>defaultIrqHandler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, board_lowlevel.o(i.defaultIrqHandler))
<BR>[Address Reference Count : 1]<UL><LI> board_lowlevel.o(i.LowLevelInit)
</UL>
<P><STRONG><a name="[14]"></a>defaultSpuriousHandler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, board_lowlevel.o(i.defaultSpuriousHandler))
<BR>[Address Reference Count : 1]<UL><LI> board_lowlevel.o(i.LowLevelInit)
</UL>
<P><STRONG><a name="[1a]"></a>execute</STRONG> (ARM, 2148 bytes, Stack size 64 bytes, consol.o(i.execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = execute &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_read
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_get_bit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_write_data
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_set_addr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_help
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_string
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> consol.o(i.init_u_consol)
</UL>
<P><STRONG><a name="[57]"></a>ferror</STRONG> (ARM, 12 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[e4]"></a>fill_area</STRONG> (ARM, 220 bytes, Stack size 32 bytes, lcd_siem_s65.o(i.fill_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = fill_area &rArr; lcd_dat8 &rArr; lcd_cspulse &rArr; UTIL_WaitTimeInUs &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dat8
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dat
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_WaitTimeInMs
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>fill_screen</STRONG> (ARM, 160 bytes, Stack size 16 bytes, lcd_siem_s65.o(i.fill_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = fill_screen &rArr; lcd_reg &rArr; lcd_cspulse &rArr; UTIL_WaitTimeInUs &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dat
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_WaitTimeInMs
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[10]"></a>fputc</STRONG> (ARM, 60 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[f7]"></a>idxDiff</STRONG> (ARM, 20 bytes, Stack size 0 bytes, main.o(i.idxDiff))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>init_lcd</STRONG> (ARM, 220 bytes, Stack size 8 bytes, lcd_siem_s65.o(i.init_lcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = init_lcd &rArr; lcd_reg &rArr; lcd_cspulse &rArr; UTIL_WaitTimeInUs &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Clear
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dat
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cspulse
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_WaitTimeInMs
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[f2]"></a>init_u_consol</STRONG> (ARM, 72 bytes, Stack size 8 bytes, consol.o(i.init_u_consol))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = init_u_consol &rArr; microrl_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_set_sigint_callback
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_set_execute_callback
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_set_complete_callback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>lcd_cspulse</STRONG> (ARM, 20 bytes, Stack size 8 bytes, lcd_siem_s65.o(i.lcd_cspulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lcd_cspulse &rArr; UTIL_WaitTimeInUs &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_WaitTimeInUs
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dat8
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dat
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[e6]"></a>lcd_dat</STRONG> (ARM, 32 bytes, Stack size 8 bytes, lcd_siem_s65.o(i.lcd_dat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = lcd_dat &rArr; lcd_cspulse &rArr; UTIL_WaitTimeInUs &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cspulse
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_screen
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_area
</UL>

<P><STRONG><a name="[e7]"></a>lcd_dat8</STRONG> (ARM, 44 bytes, Stack size 16 bytes, lcd_siem_s65.o(i.lcd_dat8))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = lcd_dat8 &rArr; lcd_cspulse &rArr; UTIL_WaitTimeInUs &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write8
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cspulse
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_area
</UL>

<P><STRONG><a name="[e5]"></a>lcd_reg</STRONG> (ARM, 32 bytes, Stack size 8 bytes, lcd_siem_s65.o(i.lcd_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = lcd_reg &rArr; lcd_cspulse &rArr; UTIL_WaitTimeInUs &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cspulse
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_screen
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_area
</UL>

<P><STRONG><a name="[e9]"></a>lcd_write</STRONG> (ARM, 32 bytes, Stack size 4 bytes, lcd_siem_s65.o(i.lcd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lcd_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write8
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dat
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_screen
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_area
</UL>

<P><STRONG><a name="[e8]"></a>lcd_write8</STRONG> (ARM, 40 bytes, Stack size 0 bytes, lcd_siem_s65.o(i.lcd_write8))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dat8
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dat
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_screen
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_area
</UL>

<P><STRONG><a name="[32]"></a>main</STRONG> (ARM, 1388 bytes, Stack size 96 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = main &rArr; microrl_insert_char &rArr; microrl_get_complite &rArr; terminal_print_line &rArr; terminal_reset_cursor &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_insert_char
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_u_consol
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_area
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetState
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Toggle
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Clear
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_string
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_Write
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_Read
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idxDiff
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e3]"></a>mdio_read_data</STRONG> (ARM, 112 bytes, Stack size 16 bytes, mdio_drv.o(i.mdio_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mdio_read_data &rArr; mdiobb_cmd &rArr; mdiobb_send_num
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_get_bit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_cmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_get_num
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute
</UL>

<P><STRONG><a name="[e2]"></a>mdio_set_addr</STRONG> (ARM, 44 bytes, Stack size 16 bytes, mdio_drv.o(i.mdio_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mdio_set_addr &rArr; mdiobb_cmd_addr &rArr; mdiobb_cmd &rArr; mdiobb_send_num
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_cmd_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute
</UL>

<P><STRONG><a name="[e0]"></a>mdio_write_data</STRONG> (ARM, 176 bytes, Stack size 16 bytes, mdio_drv.o(i.mdio_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mdio_write_data &rArr; mdiobb_cmd &rArr; mdiobb_send_num
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_cmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_send_num
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_send_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute
</UL>

<P><STRONG><a name="[fa]"></a>mdiobb_cmd</STRONG> (ARM, 128 bytes, Stack size 16 bytes, mdio_drv.o(i.mdiobb_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mdiobb_cmd &rArr; mdiobb_send_num
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_send_num
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_read
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_write_data
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read_data
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_cmd_addr
</UL>

<P><STRONG><a name="[fc]"></a>mdiobb_cmd_addr</STRONG> (ARM, 160 bytes, Stack size 24 bytes, mdio_drv.o(i.mdiobb_cmd_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mdiobb_cmd_addr &rArr; mdiobb_cmd &rArr; mdiobb_send_num
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_cmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_send_num
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_read
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_set_addr
</UL>

<P><STRONG><a name="[e1]"></a>mdiobb_get_bit</STRONG> (ARM, 136 bytes, Stack size 0 bytes, mdio_drv.o(i.mdiobb_get_bit))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read_data
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_get_num
</UL>

<P><STRONG><a name="[df]"></a>mdiobb_read</STRONG> (ARM, 172 bytes, Stack size 16 bytes, mdio_drv.o(i.mdiobb_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mdiobb_read &rArr; mdiobb_cmd_addr &rArr; mdiobb_cmd &rArr; mdiobb_send_num
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_get_bit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_cmd_addr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_cmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_get_num
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute
</UL>

<P><STRONG><a name="[f3]"></a>microrl_init</STRONG> (ARM, 92 bytes, Stack size 16 bytes, microrl.o(i.microrl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = microrl_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_u_consol
</UL>

<P><STRONG><a name="[f8]"></a>microrl_insert_char</STRONG> (ARM, 680 bytes, Stack size 16 bytes, microrl.o(i.microrl_insert_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = microrl_insert_char &rArr; microrl_get_complite &rArr; terminal_print_line &rArr; terminal_reset_cursor &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_line_handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_reset_cursor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_print_line
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_move_cursor
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_insert_text
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_get_complite
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_backspace
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_search
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;escape_process
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>microrl_set_complete_callback</STRONG> (ARM, 8 bytes, Stack size 0 bytes, microrl.o(i.microrl_set_complete_callback))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_u_consol
</UL>

<P><STRONG><a name="[f4]"></a>microrl_set_execute_callback</STRONG> (ARM, 8 bytes, Stack size 0 bytes, microrl.o(i.microrl_set_execute_callback))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_u_consol
</UL>

<P><STRONG><a name="[f6]"></a>microrl_set_sigint_callback</STRONG> (ARM, 8 bytes, Stack size 0 bytes, microrl.o(i.microrl_set_sigint_callback))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_u_consol
</UL>

<P><STRONG><a name="[107]"></a>new_line_handler</STRONG> (ARM, 184 bytes, Stack size 48 bytes, microrl.o(i.new_line_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = new_line_handler &rArr; hist_save_line
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_newline
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_prompt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_save_line
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_insert_char
</UL>

<P><STRONG><a name="[19]"></a>print</STRONG> (ARM, 108 bytes, Stack size 8 bytes, consol.o(i.print))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = print
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_line_handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_reset_cursor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_print_line
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_newline
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_move_cursor
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_backspace
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_prompt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_get_complite
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigint
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_help
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_insert_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> consol.o(i.init_u_consol)
</UL>
<P><STRONG><a name="[de]"></a>print_help</STRONG> (ARM, 420 bytes, Stack size 4 bytes, consol.o(i.print_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = print_help &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute
</UL>

<P><STRONG><a name="[86]"></a>put_char</STRONG> (ARM, 404 bytes, Stack size 40 bytes, lcd_siem_s65.o(i.put_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = put_char &rArr; lcd_dat8 &rArr; lcd_cspulse &rArr; UTIL_WaitTimeInUs &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dat8
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dat
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cspulse
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_string
</UL>

<P><STRONG><a name="[1c]"></a>sigint</STRONG> (ARM, 16 bytes, Stack size 4 bytes, consol.o(i.sigint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sigint &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> consol.o(i.init_u_consol)
</UL>
<P><STRONG><a name="[e]"></a>_get_lc_ctype</STRONG> (ARM, 68 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ISR_Timer0</STRONG> (ARM, 196 bytes, Stack size 32 bytes, main.o(i.ISR_Timer0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ISR_Timer0
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.config_board)
</UL>
<P><STRONG><a name="[18]"></a>ISR_Timer1</STRONG> (ARM, 48 bytes, Stack size 8 bytes, main.o(i.ISR_Timer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ISR_Timer1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.config_board)
</UL>
<P><STRONG><a name="[1d]"></a>TXCDCcompleted</STRONG> (ARM, 40 bytes, Stack size 24 bytes, main.o(i.TXCDCcompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TXCDCcompleted &rArr; LED_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1e]"></a>UsbCDCDataReceived</STRONG> (ARM, 132 bytes, Stack size 24 bytes, main.o(i.UsbCDCDataReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UsbCDCDataReceived &rArr; LED_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[c6]"></a>VBus_Configure</STRONG> (ARM, 20 bytes, Stack size 8 bytes, main.o(i.VBus_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = VBus_Configure &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_board
</UL>

<P><STRONG><a name="[c7]"></a>common_len</STRONG> (ARM, 192 bytes, Stack size 24 bytes, microrl.o(i.common_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = common_len
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_get_complite
</UL>

<P><STRONG><a name="[d9]"></a>escape_process</STRONG> (ARM, 364 bytes, Stack size 16 bytes, microrl.o(i.escape_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = escape_process &rArr; hist_search &rArr; terminal_print_line &rArr; terminal_reset_cursor &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_reset_cursor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_move_cursor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_search
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_insert_char
</UL>

<P><STRONG><a name="[ee]"></a>hist_erase_older</STRONG> (ARM, 48 bytes, Stack size 0 bytes, microrl.o(i.hist_erase_older))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_save_line
</UL>

<P><STRONG><a name="[ef]"></a>hist_is_space_for_new</STRONG> (ARM, 120 bytes, Stack size 0 bytes, microrl.o(i.hist_is_space_for_new))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_save_line
</UL>

<P><STRONG><a name="[eb]"></a>hist_restore_line</STRONG> (ARM, 592 bytes, Stack size 32 bytes, microrl.o(i.hist_restore_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hist_restore_line
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_search
</UL>

<P><STRONG><a name="[ed]"></a>hist_save_line</STRONG> (ARM, 260 bytes, Stack size 24 bytes, microrl.o(i.hist_save_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hist_save_line
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_is_space_for_new
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_erase_older
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_line_handler
</UL>

<P><STRONG><a name="[da]"></a>hist_search</STRONG> (ARM, 84 bytes, Stack size 16 bytes, microrl.o(i.hist_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hist_search &rArr; terminal_print_line &rArr; terminal_reset_cursor &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_reset_cursor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_print_line
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_restore_line
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;escape_process
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_insert_char
</UL>

<P><STRONG><a name="[ff]"></a>microrl_backspace</STRONG> (ARM, 120 bytes, Stack size 8 bytes, microrl.o(i.microrl_backspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = microrl_backspace &rArr; terminal_backspace &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_backspace
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_insert_char
</UL>

<P><STRONG><a name="[102]"></a>microrl_get_complite</STRONG> (ARM, 376 bytes, Stack size 64 bytes, microrl.o(i.microrl_get_complite))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = microrl_get_complite &rArr; terminal_print_line &rArr; terminal_reset_cursor &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_reset_cursor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_print_line
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_newline
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_prompt
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_insert_text
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_len
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_insert_char
</UL>

<P><STRONG><a name="[106]"></a>microrl_insert_text</STRONG> (ARM, 224 bytes, Stack size 24 bytes, microrl.o(i.microrl_insert_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = microrl_insert_text
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_get_complite
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_insert_char
</UL>

<P><STRONG><a name="[105]"></a>print_prompt</STRONG> (ARM, 20 bytes, Stack size 8 bytes, microrl.o(i.print_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = print_prompt &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_line_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_get_complite
</UL>

<P><STRONG><a name="[103]"></a>split</STRONG> (ARM, 188 bytes, Stack size 16 bytes, microrl.o(i.split))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = split
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_line_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_get_complite
</UL>

<P><STRONG><a name="[100]"></a>terminal_backspace</STRONG> (ARM, 20 bytes, Stack size 8 bytes, microrl.o(i.terminal_backspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = terminal_backspace &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_backspace
</UL>

<P><STRONG><a name="[db]"></a>terminal_move_cursor</STRONG> (ARM, 104 bytes, Stack size 32 bytes, microrl.o(i.terminal_move_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = terminal_move_cursor &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_print_line
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;escape_process
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_insert_char
</UL>

<P><STRONG><a name="[104]"></a>terminal_newline</STRONG> (ARM, 20 bytes, Stack size 8 bytes, microrl.o(i.terminal_newline))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = terminal_newline &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_line_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_get_complite
</UL>

<P><STRONG><a name="[f0]"></a>terminal_print_line</STRONG> (ARM, 132 bytes, Stack size 24 bytes, microrl.o(i.terminal_print_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = terminal_print_line &rArr; terminal_reset_cursor &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_reset_cursor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_move_cursor
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_get_complite
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_search
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_insert_char
</UL>

<P><STRONG><a name="[dc]"></a>terminal_reset_cursor</STRONG> (ARM, 76 bytes, Stack size 32 bytes, microrl.o(i.terminal_reset_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = terminal_reset_cursor &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_print_line
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_get_complite
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_search
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;escape_process
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microrl_insert_char
</UL>

<P><STRONG><a name="[90]"></a>PIO_SetInput</STRONG> (ARM, 56 bytes, Stack size 0 bytes, pio.o(i.PIO_SetInput))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[91]"></a>PIO_SetOutput</STRONG> (ARM, 80 bytes, Stack size 0 bytes, pio.o(i.PIO_SetOutput))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[8e]"></a>PIO_SetPeripheralA</STRONG> (ARM, 36 bytes, Stack size 0 bytes, pio.o(i.PIO_SetPeripheralA))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[8f]"></a>PIO_SetPeripheralB</STRONG> (ARM, 36 bytes, Stack size 0 bytes, pio.o(i.PIO_SetPeripheralB))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[78]"></a>FindClockConfiguration</STRONG> (ARM, 164 bytes, Stack size 72 bytes, pwmc.o(i.FindClockConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = FindClockConfiguration &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_ConfigureClocks
</UL>

<P><STRONG><a name="[a1]"></a>UDP_ClearRxFlag</STRONG> (ARM, 232 bytes, Stack size 8 bytes, usbd_udp.o(i.UDP_ClearRxFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UDP_ClearRxFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
</UL>

<P><STRONG><a name="[9b]"></a>UDP_DisableEndpoints</STRONG> (ARM, 60 bytes, Stack size 8 bytes, usbd_udp.o(i.UDP_DisableEndpoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UDP_DisableEndpoints &rArr; UDP_EndOfTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndOfTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfiguration
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_InterruptHandler
</UL>

<P><STRONG><a name="[be]"></a>UDP_DisablePeripheralClock</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usbd_udp.o(i.UDP_DisablePeripheralClock))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_InterruptHandler
</UL>

<P><STRONG><a name="[bd]"></a>UDP_DisableTransceiver</STRONG> (ARM, 24 bytes, Stack size 0 bytes, usbd_udp.o(i.UDP_DisableTransceiver))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_InterruptHandler
</UL>

<P><STRONG><a name="[bf]"></a>UDP_DisableUsbClock</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usbd_udp.o(i.UDP_DisableUsbClock))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_InterruptHandler
</UL>

<P><STRONG><a name="[ba]"></a>UDP_EnablePeripheralClock</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usbd_udp.o(i.UDP_EnablePeripheralClock))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_InterruptHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[c0]"></a>UDP_EnableTransceiver</STRONG> (ARM, 24 bytes, Stack size 0 bytes, usbd_udp.o(i.UDP_EnableTransceiver))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_InterruptHandler
</UL>

<P><STRONG><a name="[bb]"></a>UDP_EnableUsbClock</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usbd_udp.o(i.UDP_EnableUsbClock))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_InterruptHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[9c]"></a>UDP_EndOfTransfer</STRONG> (ARM, 112 bytes, Stack size 24 bytes, usbd_udp.o(i.UDP_EndOfTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UDP_EndOfTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Halt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigureEndpoint
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_DisableEndpoints
</UL>

<P><STRONG><a name="[9d]"></a>UDP_EndpointHandler</STRONG> (ARM, 1192 bytes, Stack size 40 bytes, usbd_udp.o(i.UDP_EndpointHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = UDP_EndpointHandler &rArr; USBDCallbacks_RequestReceived &rArr; CDCDSerialDriver_RequestHandler &rArr; USBDDriver_RequestHandler &rArr; GetDescriptor &rArr; USBD_Stall &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCallbacks_RequestReceived
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_setCSR
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_WritePayload
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ReadRequest
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ReadPayload
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_IsTransferFinished
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndOfTransfer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ClearRxFlag
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericRequest_GetDirection
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_InterruptHandler
</UL>

<P><STRONG><a name="[9e]"></a>UDP_IsTransferFinished</STRONG> (ARM, 116 bytes, Stack size 0 bytes, usbd_udp.o(i.UDP_IsTransferFinished))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
</UL>

<P><STRONG><a name="[a2]"></a>UDP_ReadPayload</STRONG> (ARM, 132 bytes, Stack size 8 bytes, usbd_udp.o(i.UDP_ReadPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UDP_ReadPayload
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
</UL>

<P><STRONG><a name="[a3]"></a>UDP_ReadRequest</STRONG> (ARM, 48 bytes, Stack size 0 bytes, usbd_udp.o(i.UDP_ReadRequest))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
</UL>

<P><STRONG><a name="[b9]"></a>UDP_ResetEndpoints</STRONG> (ARM, 88 bytes, Stack size 0 bytes, usbd_udp.o(i.UDP_ResetEndpoints))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_InterruptHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[9f]"></a>UDP_WritePayload</STRONG> (ARM, 116 bytes, Stack size 8 bytes, usbd_udp.o(i.UDP_WritePayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UDP_WritePayload
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Write
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
</UL>

<P><STRONG><a name="[79]"></a>GetConfiguration</STRONG> (ARM, 36 bytes, Stack size 16 bytes, usbddriver.o(i.GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GetConfiguration &rArr; USBD_Write &rArr; USBD_setCSR
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[7a]"></a>GetDescriptor</STRONG> (ARM, 624 bytes, Stack size 56 bytes, usbddriver.o(i.GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GetDescriptor &rArr; USBD_Stall &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Stall
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsHighSpeed
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBGenericDescriptor_GetLength
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBConfigurationDescriptor_GetTotalLength
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[7f]"></a>GetDeviceStatus</STRONG> (ARM, 140 bytes, Stack size 24 bytes, usbddriver.o(i.GetDeviceStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GetDeviceStatus &rArr; USBD_Write &rArr; USBD_setCSR
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsHighSpeed
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBConfigurationDescriptor_IsSelfPowered
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[81]"></a>GetEndpointStatus</STRONG> (ARM, 84 bytes, Stack size 16 bytes, usbddriver.o(i.GetEndpointStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GetEndpointStatus &rArr; USBD_Stall &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Stall
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsHalted
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[83]"></a>GetInterface</STRONG> (ARM, 72 bytes, Stack size 16 bytes, usbddriver.o(i.GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GetInterface &rArr; USBD_Stall &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[93]"></a>SetConfiguration</STRONG> (ARM, 168 bytes, Stack size 48 bytes, usbddriver.o(i.SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = SetConfiguration &rArr; USBD_ConfigureEndpoint &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfiguration
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsHighSpeed
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigureEndpoint
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBConfigurationDescriptor_Parse
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriverCallbacks_ConfigurationChanged
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[98]"></a>SetInterface</STRONG> (ARM, 104 bytes, Stack size 24 bytes, usbddriver.o(i.SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SetInterface &rArr; USBD_Stall &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Stall
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriverCallbacks_InterfaceSettingChanged
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDriver_RequestHandler
</UL>

<P><STRONG><a name="[63]"></a>CDCDSerialDriver_GetLineCoding</STRONG> (ARM, 40 bytes, Stack size 8 bytes, cdcdserialdriver.o(i.CDCDSerialDriver_GetLineCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = CDCDSerialDriver_GetLineCoding &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Write
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_RequestHandler
</UL>

<P><STRONG><a name="[70]"></a>CDCDSerialDriver_SetControlLineState</STRONG> (ARM, 64 bytes, Stack size 16 bytes, cdcdserialdriver.o(i.CDCDSerialDriver_SetControlLineState))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CDCDSerialDriver_SetControlLineState &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Write
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_RequestHandler
</UL>

<P><STRONG><a name="[6d]"></a>CDCDSerialDriver_SetLineCoding</STRONG> (ARM, 40 bytes, Stack size 8 bytes, cdcdserialdriver.o(i.CDCDSerialDriver_SetLineCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = CDCDSerialDriver_SetLineCoding &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Read
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCDSerialDriver_RequestHandler
</UL>

<P><STRONG><a name="[11]"></a>CDCDSerialDriver_SetLineCodingCallback</STRONG> (ARM, 96 bytes, Stack size 8 bytes, cdcdserialdriver.o(i.CDCDSerialDriver_SetLineCodingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CDCDSerialDriver_SetLineCodingCallback &rArr; USBD_Write &rArr; USBD_setCSR
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Write
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCLineCoding_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdcdserialdriver.o(i.CDCDSerialDriver_SetLineCoding)
</UL>
<P><STRONG><a name="[fb]"></a>mdiobb_get_num</STRONG> (ARM, 72 bytes, Stack size 12 bytes, mdio_drv.o(i.mdiobb_get_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mdiobb_get_num
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read_data
</UL>

<P><STRONG><a name="[fd]"></a>mdiobb_send_bit</STRONG> (ARM, 208 bytes, Stack size 0 bytes, mdio_drv.o(i.mdiobb_send_bit))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_write_data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_send_num
</UL>

<P><STRONG><a name="[fe]"></a>mdiobb_send_num</STRONG> (ARM, 56 bytes, Stack size 16 bytes, mdio_drv.o(i.mdiobb_send_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mdiobb_send_num
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_send_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_write_data
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_cmd_addr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdiobb_cmd
</UL>

<P><STRONG><a name="[61]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[60]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[5f]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[62]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[f]"></a>_printf_input_char</STRONG> (ARM, 20 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[55]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[40]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[41]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
